//------Задание 1--------
//Напишите функцию min, принимающую два аргумента, и возвращающую минимальный из них.
//console.log(min(0, 10)); // → 0 
//console.log(min(0, -10)); // → -10


function min(num1,num2)
{ 
  var min_num=num1;
 
  if(num2 < min_num){
	min_num = num2;
	}
	return(min_num);
}

console.log(min(0,10));

//------Задание 2--------
//Символ номер N строки можно получить, добавив к ней .charAt(N) ( “строчка”.charAt(5) ) – схожим образом с получением длины строки при помощи .length. Возвращаемое значение будет строковым, состоящим из одного символа (к примеру, “к”). У первого символа строки позиция 0, что означает, что у последнего символа позиция будет string.length – 1. Другими словами, у строки из двух символов длина 2, а позиции её символов будут 0 и 1.
//Напишите функцию countBs, которая принимает строку в качестве аргумента, и возвращает количество символов “B”, содержащихся в строке.

function countBs(str)
{
	var i,countB;
	countB = 0;
	for(i=0; i < str.length; i++)
    {
		if (str.charAt(i) == 'B')
		{ countB=countB+1;}
	}
return countB;
}
countBs('sdaBsadsadBsdsaBdsbBsB');

// Затем напишите функцию countChar, которая работает примерно как countBs, только принимает второй параметр — символ, который мы будем искать в строке (вместо того, чтобы просто считать количество символов “B”). Для этого переделайте функцию countBs.
 
function countChar(str,sim)
{
	var i,countB;
	countB = 0;
	for(i=0; i < str.length; i++)
    {
		if (str.charAt(i) == sim)
		{ countB=countB+1;}
	}
return countB;
}

countChar('sdaBsadsadBsdsaBdsbBsB', 's');

//------Задание 3*--------
// Ноль чётный. Единица нечётная. У любого числа N чётность такая же, как у N-2.Напишите рекурсивную функцию isEven согласно этим правилам. Она должна принимать число и возвращать булевское значение. Потестируйте её на 50 и 75. Попробуйте задать ей -1. Почему она ведёт себя таким образом? Можно ли её как-то исправить?

function isEven(num){
	if(num == 0) return true;
	if(num == 1) return false;
	return isEven(num - 2 * (num > 0 ? 1 : -1));
}
isEven (50);